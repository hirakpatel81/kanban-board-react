{"ast":null,"code":"var _jsxFileName = \"H:\\\\Project\\\\React\\\\Kanban Board\\\\react-kanban-board\\\\src\\\\components\\\\Board\\\\New Task\\\\TaskForm.js\";\nimport React from \"react\";\nimport { Button, Modal, FormGroup, FormLabel } from \"react-bootstrap\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"./NewTask.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nconst validationSchema = Yup.object().shape({\n  title: Yup.string().required(\"Title is required\"),\n  description: Yup.string().required(\"Description is required\"),\n  startDate: Yup.date().nullable().required(\"Start Date is required\"),\n  //endDate: Yup.date().nullable().required(\"End Date is required\"),\n  endDate: Yup.date().when(\"startDate\", (startDate, schema) => startDate && schema.min(startDate, \"End date must be after the start date.\")).nullable().required(\"End Date is required\")\n});\n\nfunction TaskForm(props) {\n  console.log(props.editedValues);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: props.editedValues || props.initialValues,\n    validationSchema: validationSchema,\n    onSubmit: props.onSubmit,\n    enableReinitialize: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, formik => {\n    return /*#__PURE__*/React.createElement(Modal, {\n      show: props.show,\n      onHide: props.handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, props.taskState, \" Task\")), /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(Field, {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      className: `form-control ${formik.touched.title && formik.errors.title ? \"is-invalid\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      component: \"div\",\n      name: \"title\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(Field, {\n      type: \"text\",\n      id: \"description\",\n      name: \"description\",\n      className: `form-control ${formik.touched.description && formik.errors.description ? \"is-invalid\" : \"\"}`,\n      as: \"textarea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      component: \"div\",\n      name: \"description\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, \"Start Date\"), /*#__PURE__*/React.createElement(DatePicker, {\n      selected: formik.values.startDate,\n      name: \"startDate\",\n      id: \"startDate\",\n      onBlur: formik.handleBlur,\n      onChange: date => formik.setFieldValue(\"startDate\", date),\n      className: `form-control ${formik.touched.startDate && formik.errors.startDate ? \"is-invalid\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      component: \"div\",\n      name: \"startDate\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, \"End Date\"), /*#__PURE__*/React.createElement(DatePicker, {\n      selected: formik.values.endDate,\n      name: \"endDate\",\n      onBlur: formik.handleBlur,\n      onChange: date => formik.setFieldValue(\"endDate\", date),\n      className: `form-control ${formik.touched.endDate && formik.errors.endDate ? \"is-invalid\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      component: \"div\",\n      name: \"endDate\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: props.handleClose,\n      type: \"reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 19\n      }\n    }, \"Save Changes\"))));\n  }));\n}\n\nexport default TaskForm;","map":{"version":3,"sources":["H:/Project/React/Kanban Board/react-kanban-board/src/components/Board/New Task/TaskForm.js"],"names":["React","Button","Modal","FormGroup","FormLabel","Formik","Form","Field","ErrorMessage","Yup","DatePicker","validationSchema","object","shape","title","string","required","description","startDate","date","nullable","endDate","when","schema","min","TaskForm","props","console","log","editedValues","initialValues","onSubmit","formik","show","handleClose","taskState","touched","errors","values","handleBlur","setFieldValue"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Modal, FormGroup, FormLabel } from \"react-bootstrap\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"./NewTask.css\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  title: Yup.string().required(\"Title is required\"),\r\n  description: Yup.string().required(\"Description is required\"),\r\n  startDate: Yup.date().nullable().required(\"Start Date is required\"),\r\n  //endDate: Yup.date().nullable().required(\"End Date is required\"),\r\n  endDate: Yup.date()\r\n    .when(\r\n      \"startDate\",\r\n      (startDate, schema) =>\r\n        startDate &&\r\n        schema.min(startDate, \"End date must be after the start date.\")\r\n    )\r\n    .nullable()\r\n    .required(\"End Date is required\"),\r\n});\r\n\r\nfunction TaskForm(props) {\r\n    console.log(props.editedValues)\r\n  return (\r\n    <>\r\n\r\n      <Formik\r\n        initialValues={props.editedValues|| props.initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={props.onSubmit}\r\n        enableReinitialize\r\n      >\r\n        {(formik) => {\r\n          return (\r\n            <Modal show={props.show} onHide={props.handleClose}>\r\n              <Modal.Header closeButton>\r\n          <Modal.Title>{props.taskState} Task</Modal.Title>\r\n              </Modal.Header>\r\n              <Form>\r\n                <Modal.Body>\r\n                  <FormGroup>\r\n                    <FormLabel>Title</FormLabel>\r\n                    <Field\r\n                      type=\"text\"\r\n                      id=\"title\"\r\n                      name=\"title\"\r\n                      className={`form-control ${\r\n                        formik.touched.title && formik.errors.title\r\n                          ? \"is-invalid\"\r\n                          : \"\"\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage\r\n                      component=\"div\"\r\n                      name=\"title\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <FormLabel>Description</FormLabel>\r\n                    <Field\r\n                      type=\"text\"\r\n                      id=\"description\"\r\n                      name=\"description\"\r\n                      className={`form-control ${\r\n                        formik.touched.description && formik.errors.description\r\n                          ? \"is-invalid\"\r\n                          : \"\"\r\n                      }`}\r\n                      as=\"textarea\"\r\n                    />\r\n                    <ErrorMessage\r\n                      component=\"div\"\r\n                      name=\"description\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <FormLabel>Start Date</FormLabel>\r\n\r\n                    <DatePicker\r\n                      selected={formik.values.startDate}\r\n                      name=\"startDate\"\r\n                      id=\"startDate\"\r\n                      onBlur={formik.handleBlur}\r\n                      onChange={(date) =>\r\n                        formik.setFieldValue(\"startDate\", date)\r\n                      }\r\n                      className={`form-control ${\r\n                        formik.touched.startDate && formik.errors.startDate\r\n                          ? \"is-invalid\"\r\n                          : \"\"\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage\r\n                      component=\"div\"\r\n                      name=\"startDate\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <FormLabel>End Date</FormLabel>\r\n                    <DatePicker\r\n                      selected={formik.values.endDate}\r\n                      name=\"endDate\"\r\n                      onBlur={formik.handleBlur}\r\n                      onChange={(date) => formik.setFieldValue(\"endDate\", date)}\r\n                      className={`form-control ${\r\n                        formik.touched.endDate && formik.errors.endDate\r\n                          ? \"is-invalid\"\r\n                          : \"\"\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage\r\n                      component=\"div\"\r\n                      name=\"endDate\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </FormGroup>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    onClick={props.handleClose}\r\n                    type=\"reset\"\r\n                  >\r\n                    Close\r\n                  </Button>\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    Save Changes\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Form>\r\n            </Modal>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskForm;\r\n"]},"metadata":{},"sourceType":"module"}